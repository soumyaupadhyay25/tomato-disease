import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
from fpdf import FPDF
import os
from datetime import datetime

# ================== CONSTANTS & TRANSLATIONS ==================
CLASS_NAMES = [
    "Tomato__Bacterial_spot",
    "Tomato__Early_blight",
    "Tomato__Late_blight",
    "Tomato__Leaf_Mold",
    "Tomato__Septoria_leaf_spot",
    "Tomato__Spider_mites_Two_spotted_spider_mite",
    "Tomato__Target_Spot",
    "Tomato__Tomato_Yellow_Leaf_Curl_Virus",
    "Tomato__Tomato_mosaic_virus",
    "Tomato__healthy"
]

# Language mapping
LANGUAGES = {
    "English": "en",
    "Hindi": "hi",
    "Tamil": "ta"
}

# Translations dictionary
T = {
    "title": {
        "en": "TOMATO DISEASE RECOGNITION SYSTEM",
        "hi": "рдЯрдорд╛рдЯрд░ рд░реЛрдЧ рдкрд╣рдЪрд╛рди рдкреНрд░рдгрд╛рд▓реА",
        "ta": "родроХрпНроХро╛ро│ро┐ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН роЕроорпИрокрпНрокрпБ"
    },
    "report_title": {
        "en": "Tomato Disease Detection Report",
        "hi": "рдЯрдорд╛рдЯрд░ рд░реЛрдЧ рдкрд╣рдЪрд╛рди рд░рд┐рдкреЛрд░реНрдЯ",
        "ta": "родроХрпНроХро╛ро│ро┐ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН роЕро▒ро┐роХрпНроХрпИ"
    },
    "detected_disease": {
        "en": "Detected Disease:",
        "hi": "рдкрддрд╛ рдЪрд▓рд╛ рд░реЛрдЧ:",
        "ta": "роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯ роирпЛропрпН:"
    },
    "treatment_label": {
        "en": "Recommended Treatment:",
        "hi": "рдЕрдиреБрд╢рдВрд╕рд┐рдд рдЙрдкрдЪрд╛рд░:",
        "ta": "рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ роЪро┐роХро┐роЪрпНроЪрпИ:"
    },
    "home_content": {
        "en": """## ЁЯНЕЁЯМ▒ Welcome to the Tomato Disease Prediction System

**ЁЯФН What Does It Do?**  
- Detects 9 common tomato plant diseases  
- Classifies healthy and diseased leaves  
- Recommends treatment strategies

**ЁЯза Powered by Deep Learning**  
- Trained on 10,000+ tomato leaf images  
- Uses Convolutional Neural Network (CNN)  
- 95%+ validation accuracy

**ЁЯЪА How to Use**  
1. Go to Disease Recognition page  
2. Upload leaf image (jpg/png)  
3. Get instant diagnosis""",
        "hi": """## ЁЯНЕЁЯМ▒ рдЯрдорд╛рдЯрд░ рд░реЛрдЧ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдкреНрд░рдгрд╛рд▓реА рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ

**ЁЯФН рд╕рд┐рд╕реНрдЯрдо рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?**  
- 9 рд╕рд╛рдорд╛рдиреНрдп рдЯрдорд╛рдЯрд░ рд░реЛрдЧреЛрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рддрд╛ рд╣реИ  
- рд╕реНрд╡рд╕реНрде рдФрд░ рд░реЛрдЧрдЧреНрд░рд╕реНрдд рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рд╡рд░реНрдЧреАрдХреГрдд рдХрд░рддрд╛ рд╣реИ  
- рдЙрдкрдЪрд╛рд░ рд╕реБрдЭрд╛рд╡ рджреЗрддрд╛ рд╣реИ

**ЁЯза рдПрдЖрдИ рддрдХрдиреАрдХ**  
- 10,000+ рдЯрдорд╛рдЯрд░ рдкрддреНрддреА рдЫрд╡рд┐рдпреЛрдВ рдкрд░ рдкреНрд░рд╢рд┐рдХреНрд╖рд┐рдд  
- рдХрдиреНрд╡реЗрдиреНрд╢рдирд▓ рдиреНрдпреВрд░рд▓ рдиреЗрдЯрд╡рд░реНрдХ рдореЙрдбрд▓  
- 95%+ рд╕рдЯреАрдХрддрд╛

**ЁЯЪА рдЙрдкрдпреЛрдЧ рд╡рд┐рдзрд┐**  
1. 'рд░реЛрдЧ рдкрд╣рдЪрд╛рди' рдкреЗрдЬ рдкрд░ рдЬрд╛рдПрдВ  
2. рдкрддреНрддреА рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (jpg/png)  
3. рддреБрд░рдВрдд рдкрд░рд┐рдгрд╛рдо рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ""",
        "ta": """## ЁЯНЕЁЯМ▒ родроХрпНроХро╛ро│ро┐ роирпЛропрпН роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ роЕроорпИрокрпНрокрпБроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН

**ЁЯФН роЕроорпИрокрпНрокрпБ роОройрпНрой роЪрпЖропрпНроХро┐ро▒родрпБ?**  
- 9 рокрпКродрпБро╡ро╛рой родроХрпНроХро╛ро│ро┐ роирпЛропрпНроХро│рпИ роХрогрпНроЯро▒ро┐ропрпБроорпН  
- роЖро░рпЛроХрпНроХро┐ропрооро╛рой рооро▒рпНро▒рпБроорпН роирпЛропрпН рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗро▓рпИроХро│рпИ ро╡роХрпИрокрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ  
- роЪро┐роХро┐роЪрпНроЪрпИ рокро░ро┐роирпНродрпБро░рпИроХро│рпН

**ЁЯза роЯрпАрокрпН ро▓ро░рпНройро┐роЩрпН родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокроорпН**  
- 10,000+ родроХрпНроХро╛ро│ро┐ роЗро▓рпИ рокроЯроЩрпНроХро│ро┐ро▓рпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒рпНро▒родрпБ  
- роХро╛ройрпНро╡ро▓рпНропрпВро╖ройро▓рпН роиро┐ропрпВро░ро▓рпН роирпЖроЯрпНро╡рпКро░рпНроХрпН рооро╛родро┐ро░ро┐  
- 95%+ родрпБро▓рпНро▓ро┐ропроорпН

**ЁЯЪА рокропройрпНрокроЯрпБродрпНродрпБроорпН роорпБро▒рпИ**  
1. 'роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН' рокроХрпНроХродрпНродро┐ро▒рпНроХрпБроЪрпН роЪрпЖро▓рпНро▓ро╡рпБроорпН  
2. роЗро▓рпИропро┐ройрпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒роорпН роЪрпЖропрпНропро╡рпБроорпН (jpg/png)  
3. роЙроЯройроЯро┐ роорпБроЯро┐ро╡рпБроХро│рпИрокрпН рокрпЖро▒ро╡рпБроорпН"""
    },
    "about_content": {
        "en": """## ЁЯУЪ Dataset & Model Information

**ЁЯУВ Dataset**  
- 10 classes (9 diseases + healthy)  
- 10,000 training images  
- 1,006 validation images

**ЁЯЦ╝я╕П Image Specifications**  
- RGB format  
- 128x128 resolution  
- Various lighting conditions

**ЁЯдЦ Model Architecture**  
- TensorFlow/Keras CNN   
- Data augmentation layers

**ЁЯСиЁЯТ╗ Developers**  
Ayush Pandey & Soumya Upadhyay  
AI Engineering Team""",
        "hi": """## ЁЯУЪ рдбреЗрдЯрд╛рд╕реЗрдЯ рдФрд░ рдореЙрдбрд▓ рдЬрд╛рдирдХрд╛рд░реА

**ЁЯУВ рдбреЗрдЯрд╛рд╕реЗрдЯ**  
- 10 рд╡рд░реНрдЧ (9 рд░реЛрдЧ + рд╕реНрд╡рд╕реНрде)  
- 10,000 рдкреНрд░рд╢рд┐рдХреНрд╖рдг рдЫрд╡рд┐рдпрд╛рдБ  
- 1,006 рд╕рддреНрдпрд╛рдкрди рдЫрд╡рд┐рдпрд╛рдБ

**ЁЯЦ╝я╕П рдЫрд╡рд┐ рд╡рд┐рд╡рд░рдг**  
- RGB рдкреНрд░рд╛рд░реВрдк  
- 128x128 рд░рд┐рдЬрд╝реЙрд▓реНрдпреВрд╢рди  
- рд╡рд┐рднрд┐рдиреНрди рдкреНрд░рдХрд╛рд╢ рд╕реНрдерд┐рддрд┐рдпрд╛рдБ

**ЁЯдЦ рдореЙрдбрд▓ рдЖрд░реНрдХрд┐рдЯреЗрдХреНрдЪрд░**  
- TensorFlow/Keras CNN    
- рдбреЗрдЯрд╛ рд╕рдВрд╡рд░реНрджреНрдзрди

**ЁЯСиЁЯТ╗ рдбреЗрд╡рд▓рдкрд░реНрд╕**  
рдЖрдпреБрд╖ рдкрд╛рдВрдбреЗрдп рдФрд░ рд╕реМрдореНрдпрд╛ рдЙрдкрд╛рдзреНрдпрд╛рдп  
рдПрдЖрдИ рдЗрдВрдЬреАрдирд┐рдпрд░рд┐рдВрдЧ рдЯреАрдо""",
        "ta": """## ЁЯУЪ родро░ро╡рпБродрпНродрпКроХрпБрокрпНрокрпБ & рооро╛родро┐ро░ро┐ родроХро╡ро▓рпН

**ЁЯУВ родро░ро╡рпБродрпНродрпКроХрпБрокрпНрокрпБ**  
- 10 ро╡роХрпИроХро│рпН (9 роирпЛропрпНроХро│рпН + роЖро░рпЛроХрпНроХро┐ропрооро╛ройродрпБ)  
- 10,000 рокропро┐ро▒рпНроЪро┐ рокроЯроЩрпНроХро│рпН  
- 1,006 роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ рокроЯроЩрпНроХро│рпН

**ЁЯЦ╝я╕П рокроЯ ро╡ро┐ро╡ро░роХрпНроХрпБро▒ро┐рокрпНрокрпБроХро│рпН**  
- RGB ро╡роЯро┐ро╡роорпН  
- 128x128 родрпАро░рпНрооро╛ройроорпН  
- рокро▓рпНро╡рпЗро▒рпБ роТро│ро┐ роиро┐ро▓рпИроорпИроХро│рпН

**ЁЯдЦ рооро╛родро┐ро░ро┐ роХроЯрпНроЯроорпИрокрпНрокрпБ**  
- TensorFlow/Keras CNN    
- родро░ро╡рпБ роорпЗроорпНрокроЯрпБродрпНродро▓рпН

**ЁЯСиЁЯТ╗ роЙро░рпБро╡ро╛роХрпНроХрпБройро░рпНроХро│рпН**  
роЖропрпБро╖рпН рокро╛рогрпНроЯрпЗ рооро▒рпНро▒рпБроорпН роЪрпМроорпНропро╛ роЙрокро╛родрпНропро╛ропрпН  
AI рокрпКро▒ро┐ропро┐ропро▓рпН роХрпБро┤рпБ"""
    }
}

# ================== Add Missing Treatment ==================
T['treatment'] = {
    'Tomato__Bacterial_spot': {
        "en": "Copper-based bactericides. Avoid overhead irrigation.",
        "hi": "рддрд╛рдВрдмрд╛-рдЖрдзрд╛рд░рд┐рдд рдЬреАрд╡рд╛рдгреБрд░реЛрдзреАред рдКрдкрд░ рд╕реЗ рд╕рд┐рдВрдЪрд╛рдИ рди рдХрд░реЗрдВред",
        "ta": "родро╛рооро┐ро░роорпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой рокро╛роХрпНроЯрпАро░ро┐ропро╛ роОродро┐ро░рпНрокрпНрокро┐роХро│рпН. роорпЗро▓ро┐ро░рпБроирпНродрпБ роирпАро░рпНрокрпНрокро╛роЪройроорпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН."
    },
    'Tomato__Early_blight': {
        "en": "Use fungicides like chlorothalonil or mancozeb. Remove infected leaves.",
        "hi": "рдХреНрд▓реЛрд░реЛрдерд╛рд▓реЛрдирд┐рд▓ рдпрд╛ рдореИрдВрдХреЛрдЬреЗрдм рдЬреИрд╕реЗ рдХрд╡рдХрдирд╛рд╢реА рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рд╣рдЯрд╛ рджреЗрдВред",
        "ta": "роХрпБро│рпЛро░рпЛродрпНродро╛ро▓рпЛройро┐ро▓рпН роЕро▓рпНро▓родрпБ рооро╛роЩрпНроХрпЛроЪрпЖрокрпН рокрпЛройрпНро▒ рокрпВроЮрпНроЪрпИроиро╛роЪро┐ройро┐роХро│рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗро▓рпИроХро│рпИ роЕроХро▒рпНро▒ро╡рпБроорпН."
    },
    'Tomato__Late_blight': {
        "en": "Use fungicides with active ingredients like copper or chlorothalonil. Avoid wet foliage.",
        "hi": "рдХреЙрдкрд░ рдпрд╛ рдХреНрд▓реЛрд░реЛрдерд╛рд▓реЛрдирд┐рд▓ рдЬреИрд╕реЗ рддрддреНрд╡реЛрдВ рд╡рд╛рд▓реЗ рдХрд╡рдХрдирд╛рд╢реА рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред рдЧреАрд▓реА рдкрддреНрддрд┐рдпреЛрдВ рд╕реЗ рдмрдЪреЗрдВред",
        "ta": "родро╛рооро┐ро░роорпН роЕро▓рпНро▓родрпБ роХрпБро│рпЛро░рпЛродрпНродро╛ро▓рпЛройро┐ро▓рпН роЙро│рпНро│ рокрпВроЮрпНроЪрпИроиро╛роЪро┐ройро┐роХро│рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. роИро░рооро╛рой роЗро▓рпИроХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН."
    },
    'Tomato__Leaf_Mold': {
        "en": "Ensure good air circulation. Use fungicides if necessary.",
        "hi": "рдЕрдЪреНрдЫрд╛ рд╡рд╛рдпреБ рдкреНрд░рд╡рд╛рд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВред рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрдиреЗ рдкрд░ рдХрд╡рдХрдирд╛рд╢реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "ta": "роиро▓рпНро▓ роХро╛ро▒рпНро▒рпЛроЯрпНроЯродрпНродрпИ роЙро▒рпБродро┐ роЪрпЖропрпНропро╡рпБроорпН. родрпЗро╡рпИропрпЖройро┐ро▓рпН рокрпВроЮрпНроЪрпИроиро╛роЪро┐ройро┐роХро│рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН."
    },
    'Tomato__Septoria_leaf_spot': {
        "en": "Apply fungicides and remove debris around the plant.",
        "hi": "рдХрд╡рдХрдирд╛рд╢реА рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ рдФрд░ рдкреМрдзреЗ рдХреЗ рдЪрд╛рд░реЛрдВ рдУрд░ рдХрд╛ рдорд▓рдмрд╛ рд╣рдЯрд╛ рджреЗрдВред",
        "ta": "рокрпВроЮрпНроЪрпИроиро╛роЪро┐ройро┐роХро│рпИродрпН родрпЖро│ро┐роХрпНроХро╡рпБроорпН рооро▒рпНро▒рпБроорпН роЪрпЖроЯро┐ропрпИ роЪрпБро▒рпНро▒ро┐ропрпБро│рпНро│ роХрпБрокрпНрокрпИроХро│рпИ роЕроХро▒рпНро▒ро╡рпБроорпН."
    },
    'Tomato__Spider_mites_Two_spotted_spider_mite': {
        "en": "Use miticides or insecticidal soap. Maintain humidity.",
        "hi": "рдорд╛рдЗрдЯрд┐рд╕рд╛рдЗрдб рдпрд╛ рдХреАрдЯрдирд╛рд╢рдХ рд╕рд╛рдмреБрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред рдЖрд░реНрджреНрд░рддрд╛ рдмрдирд╛рдП рд░рдЦреЗрдВред",
        "ta": "роорпИроЯрпНроЯро┐роЪрпИроЯрпБ роЕро▓рпНро▓родрпБ рокрпВроЪрпНроЪро┐ роЕро┤ро┐роХрпНроХрпБроорпН роЪрпЛрокрпНрокрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. роИро░рокрпНрокродродрпНродрпИ рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН."
    },
    'Tomato__Target_Spot': {
        "en": "Use preventive fungicides and crop rotation.",
        "hi": "рд░реЛрдХрдерд╛рдо рдХреЗ рд▓рд┐рдП рдХрд╡рдХрдирд╛рд╢реА рдФрд░ рдлрд╕рд▓ рдЪрдХреНрд░рдг рдХрд░реЗрдВред",
        "ta": "роорпБройрпНроХрпВроЯрпНроЯро┐роп рокрпВроЮрпНроЪрпИроиро╛роЪро┐ройро┐роХро│рпН рооро▒рпНро▒рпБроорпН рокропро┐ро░рпН роЪрпБро┤ро▒рпНроЪро┐ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН."
    },
    'Tomato__Tomato_Yellow_Leaf_Curl_Virus': {
        "en": "Use insecticides to control whiteflies. Remove infected plants.",
        "hi": "рд╕рдлреЗрдж рдордХреНрдЦрд┐рдпреЛрдВ рдХреЛ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреАрдЯрдирд╛рд╢рдХреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рд╣рдЯрд╛ рджреЗрдВред",
        "ta": "ро╡рпЖро│рпНро│рпИ роИропрпИ роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНрод рокрпВроЪрпНроЪро┐ роиро╛роЪро┐ройро┐роХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ родро╛ро╡ро░роЩрпНроХро│рпИ роЕроХро▒рпНро▒ро╡рпБроорпН."
    },
    'Tomato__Tomato_mosaic_virus': {
        "en": "Remove infected plants. Disinfect tools. Avoid tobacco use around plants.",
        "hi": "рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВред рдЙрдкрдХрд░рдгреЛрдВ рдХреЛ рдХреАрдЯрд╛рдгреБрд░рд╣рд┐рдд рдХрд░реЗрдВред рдкреМрдзреЛрдВ рдХреЗ рдкрд╛рд╕ рддрдВрдмрд╛рдХреВ рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред",
        "ta": "рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ родро╛ро╡ро░роЩрпНроХро│рпИ роЕроХро▒рпНро▒ро╡рпБроорпН. роХро░рпБро╡ро┐роХро│рпИ рдЬреАрд╡рд╛рдгрпБроиро╛роЪро┐ройро┐ропрпБроЯройрпН роЪрпБродрпНродроорпН роЪрпЖропрпНропро╡рпБроорпН. родро╛ро╡ро░роЩрпНроХро│рпБроХрпНроХрпБроХрпН роХрпБро▒рпБроХро┐роп родрпВро░родрпНродро┐ро▓рпН рокрпБроХрпИрокро┐роЯро┐рокрпНрокродрпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН."
    },
    'Tomato__healthy': {
        "en": "No treatment needed. Maintain proper care.",
        "hi": "рдЙрдкрдЪрд╛рд░ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВред рдЙрдЪрд┐рдд рджреЗрдЦрднрд╛рд▓ рдмрдирд╛рдП рд░рдЦреЗрдВред",
        "ta": "роЪро┐роХро┐роЪрпНроЪрпИ родрпЗро╡рпИропро┐ро▓рпНро▓рпИ. роЪро░ро┐ропро╛рой рокро░ро╛рооро░ро┐рокрпНрокрпИ роиро┐ро▓рпИроиро╛роЯрпНроЯро╡рпБроорпН."
    }
}

# ================== Disease Recognition ==================
from fpdf import FPDF
from datetime import datetime


# Specify the path to your Noto Sans Regular font
font_path = r"C:\Users\ayush\Downloads\tomato disease\fonts\NotoSans-Regular.ttf"  # Correct path to your font file

# Generate PDF with Unicode support
def generate_pdf(disease_name, confidence, treatment, language):
    pdf = FPDF()
    pdf.add_page()

    # Add custom font that supports Unicode characters (Noto Sans Regular)
    pdf.add_font('NotoSans', '', font_path, uni=True)  # Load font with Unicode support
    pdf.set_font('NotoSans', '', 12)  # Use the custom font

    # Add content to the PDF
    pdf.cell(200, 10, T['report_title'][language], ln=True, align="C")
    pdf.ln(10)
    pdf.cell(200, 10, f"{T['detected_disease'][language]} {disease_name}", ln=True)
    pdf.cell(200, 10, f"Confidence: {confidence:.2f}%", ln=True)
    pdf.ln(10)
    pdf.cell(200, 10, f"{T['treatment_label'][language]} {treatment}", ln=True)

    # Save the PDF to a file
    file_name = f"tomato_disease_report_{datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
    pdf.output(file_name)
    return file_name


if __name__ == '__main__':
    # Language selection and sidebar content
    language_selection = st.sidebar.selectbox("Select Language", ["English", "Hindi", "Tamil"])
    language = LANGUAGES[language_selection]  # Convert selection to language code

    # Set the main page content based on the sidebar selection
    page_selection = st.sidebar.selectbox("Select Page", ["Home", "About", "Disease Recognition"])

    if page_selection == "Home":
        st.title(T['title'][language])
        st.markdown(T['home_content'][language])
    elif page_selection == "About":
        st.title("ЁЯУЪ Dataset & Model Information")
        st.markdown(T['about_content'][language])
    elif page_selection == "Disease Recognition":
        st.title("ЁЯМ▒ Disease Recognition")
        st.write("Upload a leaf image to detect the disease.")
        uploaded_file = st.file_uploader("Upload Tomato Leaf Image", type=["jpg", "png"])

        if uploaded_file is not None:
            try:
                # Open the image using PIL
                image = Image.open(uploaded_file)
                image = image.convert('RGB')  # Ensure the image is in RGB

                # Display the image
                st.image(image, caption="Uploaded Image", use_column_width=True)

                # Preprocess the image for prediction
                model = tf.keras.models.load_model('full_model.h5')
                image = np.array(image.resize((128, 128))) / 255.0
                image = np.expand_dims(image, axis=0)

                # Make predictions
                predictions = model.predict(image)
                predicted_class = CLASS_NAMES[np.argmax(predictions)]
                confidence = np.max(predictions) * 100

                st.write(f"Predicted Disease: {predicted_class}")
                st.write(f"Confidence: {confidence:.2f}%")

                # Fetch treatment
                treatment = T['treatment'].get(predicted_class, T['treatment']['Tomato__healthy'])[language]

                st.write(f"Recommended Treatment: {treatment}")

                # If user wants to download a report
                if st.button("Download Report"):
                    generate_pdf(predicted_class, confidence, treatment, language)

            except Exception as e:
                st.error(f"Error: {e}")
